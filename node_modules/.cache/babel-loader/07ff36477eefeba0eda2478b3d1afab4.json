{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        //  if the method is not set, send GET\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        // if the headers are not set, set it to an empty object\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        // if the body is set, stringify it, if not set it to null\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    // v.1\n    // isLoading: isLoading,\n    // error: error,\n    // sendRequest: sendRequest\n    // v.2 if the same name, we can simplify it with:\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"names":["useState","useCallback","useHttp","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","requestConfig","url","method","headers","body","JSON","stringify","ok","Error","data","json","applyData","err","message"],"sources":["/home/kfederer/code/federerkristijan/07-react-custom-hooks/src/hooks/useHttp.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async (taskText) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        requestConfig.url, {\n          //  if the method is not set, send GET\n          method: requestConfig.method ? requestConfig.method : 'GET',\n          // if the headers are not set, set it to an empty object\n          headers: requestConfig.headers ? requestConfig.headers : {},\n          // if the body is set, stringify it, if not set it to null\n          body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n        }\n\n      );\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  };\n\n  return {\n    // v.1\n    // isLoading: isLoading,\n    // error: error,\n    // sendRequest: sendRequest\n\n    // v.2 if the same name, we can simplify it with:\n    isLoading,\n    error,\n    sendRequest\n  }\n};\n\nexport default useHttp;\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;;EAEA,MAAMO,WAAW,GAAG,MAAOC,QAAP,IAAoB;IACtCJ,YAAY,CAAC,IAAD,CAAZ;IACAE,QAAQ,CAAC,IAAD,CAAR;;IACA,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1BC,aAAa,CAACC,GADY,EACP;QACjB;QACAC,MAAM,EAAEF,aAAa,CAACE,MAAd,GAAuBF,aAAa,CAACE,MAArC,GAA8C,KAFrC;QAGjB;QACAC,OAAO,EAAEH,aAAa,CAACG,OAAd,GAAwBH,aAAa,CAACG,OAAtC,GAAgD,EAJxC;QAKjB;QACAC,IAAI,EAAEJ,aAAa,CAACI,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeN,aAAa,CAACI,IAA7B,CAArB,GAA0D;MAN/C,CADO,CAA5B;;MAYA,IAAI,CAACN,QAAQ,CAACS,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;MACD;;MAED,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;MACAC,SAAS,CAACF,IAAD,CAAT;IACD,CAnBD,CAmBE,OAAOG,GAAP,EAAY;MACZjB,QAAQ,CAACiB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;IACD;;IACDpB,YAAY,CAAC,KAAD,CAAZ;EACD,CA1BD;;EA4BA,OAAO;IACL;IACA;IACA;IACA;IAEA;IACAD,SAPK;IAQLE,KARK;IASLE;EATK,CAAP;AAWD,CA3CD;;GAAML,O;;AA6CN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}